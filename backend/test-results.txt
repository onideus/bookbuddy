
> bookbuddy-backend@1.0.0 test
> NODE_ENV=test vitest


 DEV  v1.6.1 /Users/zachmartin/projects/active/bookbuddy-mk2/backend

stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (4) from .env.test -- tip: 🔄 add secrets lifecycle management: https://dotenvx.com/ops

stderr | tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should add a new book and create reading entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should add a new book and create reading entry
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should create initial status transition for new entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should detect duplicate books by title, author, and edition
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should allow same book for different readers
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should allow same book for different readers
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should reuse existing book when adding for same reader with different edition
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should reuse existing book when adding for same reader with different edition
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should validate title length (max 500)
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should validate author length (max 200)
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should get all reading entries for a reader
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should filter by status
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should filter by status
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should support pagination
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should support pagination
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should join with book details
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should update status and record transition
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should log analytics event for status change (FR-016)
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should validate status transitions
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should handle last-write-wins for concurrent edits (FR-010)
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should update updatedAt timestamp
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should reject invalid status values
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should reject updates to non-existent entries
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should add progress note with content and page marker
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should add progress note without page marker
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject note exceeding 1000 characters
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject empty note content
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject progress marker exceeding 50 characters
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject note for non-existent reading entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should set recordedAt timestamp automatically
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should return progress notes in chronological DESC order (newest first)
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should include book details with progress notes
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should include book details with progress notes
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should return empty array when no notes exist
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should reject request for non-existent entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should set rating for finished book
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should set rating with reflection note
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should update existing rating
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating < 1
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating > 5
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating > 5
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject non-integer ratings
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject non-integer ratings
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating for non-FINISHED book
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject reflection note exceeding 2000 characters
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should accept reflection note at max length (2000 chars)
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should accept reflection note at max length (2000 chars)
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject request for non-existent entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject if reader does not own entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should log analytics event for rating set
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should clear rating and reflection note
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should succeed even if no rating exists
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should reject request for non-existent entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should reject if reader does not own entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should log analytics event for rating cleared
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should log analytics event for rating cleared
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should return only books with rating >= 4
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should order top rated books by rating DESC
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should return empty array if no top rated books
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should support pagination
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should support pagination
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should include book details and reflection notes
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should handle second page correctly
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

 ❯ tests/unit/services/reading-service.test.js  (52 tests | 52 failed) 48ms
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should add a new book and create reading entry
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should create initial status transition for new entry
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should detect duplicate books by title, author, and edition
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should allow same book for different readers
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should reuse existing book when adding for same reader with different edition
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should validate title length (max 500)
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should validate author length (max 200)
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should get all reading entries for a reader
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should filter by status
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should support pagination
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should join with book details
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should update status and record transition
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should log analytics event for status change (FR-016)
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should validate status transitions
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should handle last-write-wins for concurrent edits (FR-010)
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should update updatedAt timestamp
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should reject invalid status values
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should reject updates to non-existent entries
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should add progress note with content and page marker
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should add progress note without page marker
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject note exceeding 1000 characters
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject empty note content
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject progress marker exceeding 50 characters
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject note for non-existent reading entry
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should set recordedAt timestamp automatically
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should return progress notes in chronological DESC order (newest first)
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should include book details with progress notes
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should return empty array when no notes exist
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should reject request for non-existent entry
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should set rating for finished book
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should set rating with reflection note
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should update existing rating
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating < 1
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating > 5
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject non-integer ratings
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating for non-FINISHED book
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject reflection note exceeding 2000 characters
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should accept reflection note at max length (2000 chars)
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject request for non-existent entry
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject if reader does not own entry
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should log analytics event for rating set
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should clear rating and reflection note
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should succeed even if no rating exists
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should reject request for non-existent entry
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should reject if reader does not own entry
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should log analytics event for rating cleared
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should return only books with rating >= 4
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should order top rated books by rating DESC
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should return empty array if no top rated books
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should support pagination
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should include book details and reflection notes
     → 
     → 
   ❯ tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should handle second page correctly
     → 
     → 
stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (0) from .env.test -- tip: 🔐 prevent committing .env to code: https://dotenvx.com/precommit

{"level":50,"time":"2025-10-29T00:05:40.958Z","env":"test","err":{"type":"Error","message":"listen EPERM: operation not permitted 0.0.0.0:3002","stack":"Error: listen EPERM: operation not permitted 0.0.0.0:3002\n    at Server.setupListenHandle [as _listen2] (node:net:1918:21)\n    at listenInCluster (node:net:1997:12)\n    at node:net:2206:7\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)","code":"EPERM","errno":-1,"syscall":"listen","address":"0.0.0.0","port":3002},"msg":"Failed to start server"}
stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should allow reader to finish book, rate it, and see it in Top Rated filter
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should support rating without reflection note
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should allow updating rating and reflection
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should allow clearing rating (for re-reads)
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Top Rated Filter > should return only books with rating >= 4 in correct order
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Top Rated Filter > should include reflection notes in Top Rated list
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Top Rated Filter > should support pagination in Top Rated filter
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should reject rating for non-FINISHED book
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should reject invalid ratings
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

 ❯ tests/integration/us3-rate-reflect.test.js  (11 tests | 11 failed) 52ms
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should allow reader to finish book, rate it, and see it in Top Rated filter
     → 
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should support rating without reflection note
     → 
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should allow updating rating and reflection
     → 
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should allow clearing rating (for re-reads)
     → 
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Top Rated Filter > should return only books with rating >= 4 in correct order
     → 
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Top Rated Filter > should include reflection notes in Top Rated list
     → 
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Top Rated Filter > should support pagination in Top Rated filter
     → 
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should reject rating for non-FINISHED book
     → 
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should reject invalid ratings
     → 
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should reject reflection note exceeding 2000 characters
     → 
   ❯ tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should accept reflection note at max length (2000 chars)
     → 
stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should reject reflection note exceeding 2000 characters
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should accept reflection note at max length (2000 chars)
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (0) from .env.test -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com

 ❯ tests/contract/reading-entries.test.js  (14 tests) 5ms
stderr | tests/contract/reading-entries.test.js > Reading Entries API - Contract Tests
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (0) from .env.test -- tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`

{"level":50,"time":"2025-10-29T00:05:41.005Z","env":"test","err":{"type":"Error","message":"listen EPERM: operation not permitted 0.0.0.0:3002","stack":"Error: listen EPERM: operation not permitted 0.0.0.0:3002\n    at Server.setupListenHandle [as _listen2] (node:net:1918:21)\n    at listenInCluster (node:net:1997:12)\n    at node:net:2206:7\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)","code":"EPERM","errno":-1,"syscall":"listen","address":"0.0.0.0","port":3002},"msg":"Failed to start server"}
stderr | tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should set rating and reflection for finished book
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should set rating without reflection note
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should reject rating for non-finished book
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should reject invalid rating values
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should reject reflection note exceeding 2000 characters
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should allow updating existing rating
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should return 404 for non-existent entry
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > DELETE /api/reading-entries/:entryId/rating > should clear rating and reflection note
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > DELETE /api/reading-entries/:entryId/rating > should return 404 for non-existent entry
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > DELETE /api/reading-entries/:entryId/rating > should succeed even if no rating exists
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should return only books with rating >= 4
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should order top rated books by rating DESC
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stderr | tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should return empty array if no top rated books
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

 ❯ tests/contract/ratings.test.js  (14 tests | 14 failed) 22ms
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should set rating and reflection for finished book
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should set rating without reflection note
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should reject rating for non-finished book
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should reject invalid rating values
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should reject reflection note exceeding 2000 characters
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should allow updating existing rating
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should return 404 for non-existent entry
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > DELETE /api/reading-entries/:entryId/rating > should clear rating and reflection note
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > DELETE /api/reading-entries/:entryId/rating > should return 404 for non-existent entry
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > DELETE /api/reading-entries/:entryId/rating > should succeed even if no rating exists
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should return only books with rating >= 4
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should order top rated books by rating DESC
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should return empty array if no top rated books
     → 
   ❯ tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should support pagination for top rated
     → 
stderr | tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should support pagination for top rated
Database query error: { error: '', query: 'DELETE FROM progress_updates' }

stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (0) from .env.test -- tip: 🔐 prevent building .env in docker: https://dotenvx.com/prebuild

 ❯ tests/integration/us2-track-progress.test.js  (8 tests) 1ms
stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (0) from .env.test -- tip: ✅ audit secrets and track compliance: https://dotenvx.com/ops

 ❯ tests/integration/us1-organize-pipeline.test.js  (5 tests) 4ms
stderr | tests/integration/us1-organize-pipeline.test.js > US1: Organize Reading Pipeline - Integration Test
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (0) from .env.test -- tip: 👥 sync secrets across teammates & machines: https://dotenvx.com/ops

 ❯ tests/unit/models/progress-update.test.js  (16 tests | 16 failed) 8ms
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should create progress update with note and page marker
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should create progress update without page marker
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject empty note
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject note exceeding 1000 characters
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject page marker exceeding 50 characters
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject invalid reading entry ID
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should return progress updates in DESC order (newest first)
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should return all progress update fields
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should return empty array when no updates exist
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should only return updates for the specified entry
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > findById > should find progress update by ID
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > findById > should return null for non-existent ID
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > countByEntry > should return correct count of progress updates
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > countByEntry > should return 0 when no updates exist
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > delete > should delete progress update by ID
     → 
     → 
   ❯ tests/unit/models/progress-update.test.js > ProgressUpdate Model > delete > should return false when deleting non-existent update
     → 
     → 
stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (0) from .env.test -- tip: ✅ audit secrets and track compliance: https://dotenvx.com/ops

 ❯ tests/contract/progress-notes.test.js  (11 tests | 11 failed) 27ms
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should create progress note with valid data
     → 
     → 
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should create progress note without progress marker
     → 
     → 
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should reject progress note with empty content
     → 
     → 
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should reject progress note exceeding max length (1000 chars)
     → 
     → 
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should reject progress marker exceeding max length (50 chars)
     → 
     → 
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should return 404 for non-existent reading entry
     → 
     → 
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should include correlation ID in response
     → 
     → 
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should return progress notes in chronological order (newest first)
     → 
     → 
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should return empty array when no notes exist
     → 
     → 
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should return 404 for non-existent reading entry
     → 
     → 
   ❯ tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should include correlation ID in response
     → 
     → 
stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (0) from .env.test -- tip: 🗂️ backup and recover secrets: https://dotenvx.com/ops

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should create a reading entry with valid data
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should create a reading entry with valid data
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should enforce unique constraint on reader_id + book_id
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should reject invalid status value
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should reject rating without FINISHED status
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should allow rating with FINISHED status
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > findById > should find reading entry by ID
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > findById > should find reading entry by ID
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > findById > should return null for non-existent ID
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should find all entries for a reader
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should include book details in results
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should support pagination
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReaderAndStatus > should filter entries by status
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReaderAndStatus > should return empty array for status with no entries
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should update entry status
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should allow updating to any valid status
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should allow updating to any valid status
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should reject invalid status
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > delete > should delete a reading entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/reading-entry.test.js > ReadingEntry Model > delete > should return false when deleting non-existent entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

 ❯ tests/unit/models/reading-entry.test.js  (17 tests | 17 failed) 11ms
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should create a reading entry with valid data
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should enforce unique constraint on reader_id + book_id
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should reject invalid status value
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should reject rating without FINISHED status
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should allow rating with FINISHED status
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > findById > should find reading entry by ID
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > findById > should return null for non-existent ID
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should find all entries for a reader
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should include book details in results
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should support pagination
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReaderAndStatus > should filter entries by status
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReaderAndStatus > should return empty array for status with no entries
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should update entry status
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should allow updating to any valid status
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should reject invalid status
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > delete > should delete a reading entry
     → 
     → 
   ❯ tests/unit/models/reading-entry.test.js > ReadingEntry Model > delete > should return false when deleting non-existent entry
     → 
     → 
stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (0) from .env.test -- tip: 🔐 prevent committing .env to code: https://dotenvx.com/precommit

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > create > should create initial transition with null fromStatus
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > create > should create transition with both statuses
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > create > should reject invalid fromStatus
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > create > should reject invalid fromStatus
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > create > should reject invalid toStatus
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > create > should allow all valid status combinations
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > create > should allow all valid status combinations
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return all transitions for an entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return transitions in reverse chronological order (newest first)
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return empty array for entry with no transitions
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return empty array for non-existent entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

 ❯ tests/unit/models/status-transition.test.js  (11 tests | 11 failed) 7ms
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > create > should create initial transition with null fromStatus
     → 
     → 
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > create > should create transition with both statuses
     → 
     → 
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > create > should reject invalid fromStatus
     → 
     → 
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > create > should reject invalid toStatus
     → 
     → 
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > create > should allow all valid status combinations
     → 
     → 
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return all transitions for an entry
     → 
     → 
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return transitions in reverse chronological order (newest first)
     → 
     → 
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return empty array for entry with no transitions
     → 
     → 
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return empty array for non-existent entry
     → 
     → 
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > getLatest > should return the most recent transition for an entry
     → 
     → 
   ❯ tests/unit/models/status-transition.test.js > StatusTransition Model > getLatest > should return null for entry with no transitions
     → 
     → 
stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > getLatest > should return the most recent transition for an entry
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/status-transition.test.js > StatusTransition Model > getLatest > should return null for entry with no transitions
Database query error: {
  error: '',
  query: 'INSERT INTO reader_profiles (id, created_at, updated_at)\n' +
    '     VALUES ($1, NOW(), NOW())'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stdout | _log (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/dotenv/lib/main.js:142:11)
[dotenv@17.2.3] injecting env (0) from .env.test -- tip: ⚙️  enable debug logging with { debug: true }

stderr | tests/unit/models/book.test.js > Book Model > create > should create a book with required fields
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}

stderr | tests/unit/models/book.test.js > Book Model > create > should create a book with required fields
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > create > should create a book with all fields
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > create > should reject title exceeding 500 characters
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}

stderr | tests/unit/models/book.test.js > Book Model > create > should reject title exceeding 500 characters
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > create > should reject author exceeding 200 characters
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > create > should reject duplicate book (same title, author, edition)
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > create > should allow same title/author with different editions
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > findById > should find a book by ID
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}

stderr | tests/unit/models/book.test.js > Book Model > findById > should find a book by ID
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > findById > should return null for non-existent ID
Database query error: { error: '', query: 'SELECT * FROM books WHERE id = $1' }
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > findById > should reject invalid UUID format
Database query error: { error: '', query: 'SELECT * FROM books WHERE id = $1' }
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should find book by exact title, author, and edition match
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}

stderr | tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should find book by exact title, author, and edition match
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should handle null edition in search
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should return null for non-matching book
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should be case-sensitive for title and author
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > update > should update book fields
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

stderr | tests/unit/models/book.test.js > Book Model > update > should reject invalid field values on update
Database query error: {
  error: '',
  query: 'INSERT INTO books (id, title, author, edition, isbn, cover_image_url, created_at, updated_at)\n' +
    '      '
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }

 ❯ tests/unit/models/book.test.js  (16 tests | 16 failed) 12ms
   ❯ tests/unit/models/book.test.js > Book Model > create > should create a book with required fields
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > create > should create a book with all fields
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > create > should reject title exceeding 500 characters
     → expected [Function] to throw error matching /title/i but got ''
     → 
   ❯ tests/unit/models/book.test.js > Book Model > create > should reject author exceeding 200 characters
     → expected [Function] to throw error matching /author/i but got ''
     → 
   ❯ tests/unit/models/book.test.js > Book Model > create > should reject duplicate book (same title, author, edition)
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > create > should allow same title/author with different editions
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > findById > should find a book by ID
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > findById > should return null for non-existent ID
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > findById > should reject invalid UUID format
     → 
   ❯ tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should find book by exact title, author, and edition match
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should handle null edition in search
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should return null for non-matching book
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should be case-sensitive for title and author
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > update > should update book fields
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > update > should reject invalid field values on update
     → 
     → 
   ❯ tests/unit/models/book.test.js > Book Model > update > should return null when updating non-existent book
     → 
     → 
stderr | tests/unit/models/book.test.js > Book Model > update > should return null when updating non-existent book
Database query error: {
  error: '',
  query: 'UPDATE books\n' +
    '       SET title = $1, updated_at = NOW()\n' +
    '       WHERE id = $2\n' +
    '       RETURNING *'
}
Database query error: { error: '', query: 'TRUNCATE TABLE status_transitions CASCADE' }


⎯⎯⎯⎯⎯⎯ Failed Suites 3 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/contract/reading-entries.test.js > Reading Entries API - Contract Tests
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.createTestReader (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:18:3)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/reading-entries.test.js:19:20\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:892:27)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.createTestReader (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:18:3)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/reading-entries.test.js:19:20\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:892:27)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.createTestReader',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 18,
      column: 3
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/reading-entries.test.js',
      line: 19,
      column: 20
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.createTestReader tests/helpers/test-data.js:18:3
 ❯ tests/contract/reading-entries.test.js:19:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/276]⎯

 FAIL  tests/contract/reading-entries.test.js > Reading Entries API - Contract Tests
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/reading-entries.test.js:30:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:917:7)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/reading-entries.test.js:30:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:917:7)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.cleanupTestData',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 62,
      column: 5
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/reading-entries.test.js',
      line: 30,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.cleanupTestData tests/helpers/test-data.js:62:5
 ❯ tests/contract/reading-entries.test.js:30:5

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/276]⎯

 FAIL  tests/integration/us1-organize-pipeline.test.js > US1: Organize Reading Pipeline - Integration Test
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.createTestReader (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:18:3)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us1-organize-pipeline.test.js:18:20\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:892:27)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.createTestReader (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:18:3)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us1-organize-pipeline.test.js:18:20\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:892:27)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.createTestReader',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 18,
      column: 3
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us1-organize-pipeline.test.js',
      line: 18,
      column: 20
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.createTestReader tests/helpers/test-data.js:18:3
 ❯ tests/integration/us1-organize-pipeline.test.js:18:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/276]⎯

 FAIL  tests/integration/us1-organize-pipeline.test.js > US1: Organize Reading Pipeline - Integration Test
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us1-organize-pipeline.test.js:30:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:917:7)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us1-organize-pipeline.test.js:30:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:917:7)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.cleanupTestData',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 62,
      column: 5
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us1-organize-pipeline.test.js',
      line: 30,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.cleanupTestData tests/helpers/test-data.js:62:5
 ❯ tests/integration/us1-organize-pipeline.test.js:30:5

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/276]⎯

 FAIL  tests/integration/us2-track-progress.test.js > US2: Track Active Reading Progress Integration Test
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us2-track-progress.test.js:21:26\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:892:27)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)\n' +
    '    at startTests (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:967:3)\n' +
    '    at file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us2-track-progress.test.js:21:26\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:892:27)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)\n' +
    '    at startTests (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:967:3)\n' +
    '    at file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us2-track-progress.test.js',
      line: 21,
      column: 26
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ tests/integration/us2-track-progress.test.js:21:26
     19|   beforeAll(async () => {
     20|     // Setup test reader
     21|     const readerResult = await pool.query(
       |                          ^
     22|       'INSERT INTO reader_profiles (id) VALUES (gen_random_uuid()) RET…
     23|     );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/276]⎯

 FAIL  tests/integration/us2-track-progress.test.js > US2: Track Active Reading Progress Integration Test
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us2-track-progress.test.js:29:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:917:7)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)\n' +
    '    at startTests (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:967:3)\n' +
    '    at file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us2-track-progress.test.js:29:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:917:7)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)\n' +
    '    at startTests (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:967:3)\n' +
    '    at file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us2-track-progress.test.js',
      line: 29,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ tests/integration/us2-track-progress.test.js:29:5
     27|   afterAll(async () => {
     28|     // Clean up test reader
     29|     await pool.query('DELETE FROM reader_profiles WHERE id = $1', [tes…
       |     ^
     30|   });
     31| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/276]⎯

⎯⎯⎯⎯⎯⎯ Failed Tests 148 ⎯⎯⎯⎯⎯⎯

 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should create progress note with valid data
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should create progress note without progress marker
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should reject progress note with empty content
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should reject progress note exceeding max length (1000 chars)
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should reject progress marker exceeding max length (50 chars)
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should return 404 for non-existent reading entry
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should include correlation ID in response
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should return progress notes in chronological order (newest first)
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should return empty array when no notes exist
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should return 404 for non-existent reading entry
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should include correlation ID in response
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/progress-notes.test.js:20:26\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/progress-notes.test.js:20:26\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/progress-notes.test.js',
      line: 20,
      column: 26
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ tests/contract/progress-notes.test.js:20:26
     18| 
     19|     // Create test reader
     20|     const readerResult = await pool.query(
       |                          ^
     21|       'INSERT INTO reader_profiles (id) VALUES (gen_random_uuid()) RET…
     22|     );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/276]⎯

 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should create progress note with valid data
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should create progress note without progress marker
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should reject progress note with empty content
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should reject progress note exceeding max length (1000 chars)
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should reject progress marker exceeding max length (50 chars)
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should return 404 for non-existent reading entry
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > POST /api/reading-entries/{entryId}/progress-notes > should include correlation ID in response
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/progress-notes.test.js:46:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/progress-notes.test.js:46:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/progress-notes.test.js',
      line: 46,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ tests/contract/progress-notes.test.js:46:5
     44|   afterEach(async () => {
     45|     // Clean up test data
     46|     await pool.query('DELETE FROM reading_entries WHERE id = $1', [tes…
       |     ^
     47|     await pool.query('DELETE FROM books WHERE id = $1', [testBookId]);
     48|     await pool.query('DELETE FROM reader_profiles WHERE id = $1', [tes…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/276]⎯

 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should return progress notes in chronological order (newest first)
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should return empty array when no notes exist
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should return 404 for non-existent reading entry
 FAIL  tests/contract/progress-notes.test.js > Progress Notes API - Contract Tests > GET /api/reading-entries/{entryId}/progress-notes > should include correlation ID in response
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/progress-notes.test.js:197:7\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/progress-notes.test.js:197:7\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/progress-notes.test.js',
      line: 197,
      column: 7
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ tests/contract/progress-notes.test.js:197:7
    195| 
    196|     afterEach(async () => {
    197|       await pool.query('DELETE FROM progress_updates WHERE reading_ent…
       |       ^
    198|     });
    199| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/276]⎯

 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should set rating and reflection for finished book
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should set rating without reflection note
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should reject rating for non-finished book
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should reject invalid rating values
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should reject reflection note exceeding 2000 characters
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should allow updating existing rating
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > PUT /api/reading-entries/:entryId/rating > should return 404 for non-existent entry
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > DELETE /api/reading-entries/:entryId/rating > should clear rating and reflection note
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > DELETE /api/reading-entries/:entryId/rating > should return 404 for non-existent entry
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > DELETE /api/reading-entries/:entryId/rating > should succeed even if no rating exists
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should return only books with rating >= 4
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should order top rated books by rating DESC
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should return empty array if no top rated books
 FAIL  tests/contract/ratings.test.js > Rating API Contract Tests > GET /api/readers/:readerId/reading-entries?topRated=true > should support pagination for top rated
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/ratings.test.js:28:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/ratings.test.js:28:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/contract/ratings.test.js',
      line: 28,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ tests/contract/ratings.test.js:28:5

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/276]⎯

 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should allow reader to finish book, rate it, and see it in Top Rated filter
 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should support rating without reflection note
 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should allow updating rating and reflection
 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Complete Rating Journey > should allow clearing rating (for re-reads)
 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Top Rated Filter > should return only books with rating >= 4 in correct order
 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Top Rated Filter > should include reflection notes in Top Rated list
 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Top Rated Filter > should support pagination in Top Rated filter
 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should reject rating for non-FINISHED book
 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should reject invalid ratings
 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should reject reflection note exceeding 2000 characters
 FAIL  tests/integration/us3-rate-reflect.test.js > User Story 3: Rate and Reflect on Finished Books > Rating Validations > should accept reflection note at max length (2000 chars)
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us3-rate-reflect.test.js:26:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us3-rate-reflect.test.js:26:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/integration/us3-rate-reflect.test.js',
      line: 26,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ tests/integration/us3-rate-reflect.test.js:26:5

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > create > should create a book with required fields
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:22:20\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:22:20\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Book.create',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js',
      line: 20,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 22,
      column: 20
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Book.create src/models/book.js:20:20
 ❯ tests/unit/models/book.test.js:22:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > create > should create a book with required fields
 FAIL  tests/unit/models/book.test.js > Book Model > create > should create a book with all fields
 FAIL  tests/unit/models/book.test.js > Book Model > create > should reject title exceeding 500 characters
 FAIL  tests/unit/models/book.test.js > Book Model > create > should reject author exceeding 200 characters
 FAIL  tests/unit/models/book.test.js > Book Model > create > should reject duplicate book (same title, author, edition)
 FAIL  tests/unit/models/book.test.js > Book Model > create > should allow same title/author with different editions
 FAIL  tests/unit/models/book.test.js > Book Model > findById > should find a book by ID
 FAIL  tests/unit/models/book.test.js > Book Model > findById > should return null for non-existent ID
 FAIL  tests/unit/models/book.test.js > Book Model > findById > should reject invalid UUID format
 FAIL  tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should find book by exact title, author, and edition match
 FAIL  tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should handle null edition in search
 FAIL  tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should return null for non-matching book
 FAIL  tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should be case-sensitive for title and author
 FAIL  tests/unit/models/book.test.js > Book Model > update > should update book fields
 FAIL  tests/unit/models/book.test.js > Book Model > update > should reject invalid field values on update
 FAIL  tests/unit/models/book.test.js > Book Model > update > should return null when updating non-existent book
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:12:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:12:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.cleanupTestData',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 62,
      column: 5
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 12,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.cleanupTestData tests/helpers/test-data.js:62:5
 ❯ tests/unit/models/book.test.js:12:5

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > create > should create a book with all fields
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:45:20\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:45:20\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Book.create',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js',
      line: 20,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 45,
      column: 20
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Book.create src/models/book.js:20:20
 ❯ tests/unit/models/book.test.js:45:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > create > should reject title exceeding 500 characters
AssertionError: expected [Function] to throw error matching /title/i but got ''

- Expected: 
/title/i

+ Received: 
""

 ❯ tests/unit/models/book.test.js:62:7
     60|       };
     61| 
     62|       await expect(Book.create(bookData)).rejects.toThrow(/title/i);
       |       ^
     63|     });
     64| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > create > should reject author exceeding 200 characters
AssertionError: expected [Function] to throw error matching /author/i but got ''

- Expected: 
/author/i

+ Received: 
""

 ❯ tests/unit/models/book.test.js:71:7
     69|       };
     70| 
     71|       await expect(Book.create(bookData)).rejects.toThrow(/author/i);
       |       ^
     72|     });
     73| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > create > should reject duplicate book (same title, author, edition)
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:81:7\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:81:7\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Book.create',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js',
      line: 20,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 81,
      column: 7
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Book.create src/models/book.js:20:20
 ❯ tests/unit/models/book.test.js:81:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > create > should allow same title/author with different editions
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:87:21\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:87:21\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Book.create',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js',
      line: 20,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 87,
      column: 21
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Book.create src/models/book.js:20:20
 ❯ tests/unit/models/book.test.js:87:21

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > findById > should find a book by ID
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:105:23\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:105:23\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Book.create',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js',
      line: 20,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 105,
      column: 23
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Book.create src/models/book.js:20:20
 ❯ tests/unit/models/book.test.js:105:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > findById > should return null for non-existent ID
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.findById (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:36:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:120:21\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.findById (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:36:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:120:21\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Book.findById',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js',
      line: 36,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 120,
      column: 21
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Book.findById src/models/book.js:36:20
 ❯ tests/unit/models/book.test.js:120:21

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should find book by exact title, author, and edition match
 FAIL  tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should handle null edition in search
 FAIL  tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should return null for non-matching book
 FAIL  tests/unit/models/book.test.js > Book Model > findByTitleAuthorEdition > should be case-sensitive for title and author
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:132:7\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:132:7\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Book.create',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js',
      line: 20,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 132,
      column: 7
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Book.create src/models/book.js:20:20
 ❯ tests/unit/models/book.test.js:132:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > update > should update book fields
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:195:20\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:195:20\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Book.create',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js',
      line: 20,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 195,
      column: 20
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Book.create src/models/book.js:20:20
 ❯ tests/unit/models/book.test.js:195:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > update > should reject invalid field values on update
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:215:20\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.create (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:20:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:215:20\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Book.create',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js',
      line: 20,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 215,
      column: 20
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Book.create src/models/book.js:20:20
 ❯ tests/unit/models/book.test.js:215:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/276]⎯

 FAIL  tests/unit/models/book.test.js > Book Model > update > should return null when updating non-existent book
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.update (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:95:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:228:23\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Book.update (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js:95:20)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js:228:23\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:781:11)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runFiles (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:958:5)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Book.update',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/models/book.js',
      line: 95,
      column: 20
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/book.test.js',
      line: 228,
      column: 23
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Book.update src/models/book.js:95:20
 ❯ tests/unit/models/book.test.js:228:23

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/276]⎯

 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should create progress update with note and page marker
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should create progress update without page marker
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject empty note
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject note exceeding 1000 characters
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject page marker exceeding 50 characters
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject invalid reading entry ID
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should return progress updates in DESC order (newest first)
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should return all progress update fields
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should return empty array when no updates exist
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should only return updates for the specified entry
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findById > should find progress update by ID
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findById > should return null for non-existent ID
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > countByEntry > should return correct count of progress updates
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > countByEntry > should return 0 when no updates exist
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > delete > should delete progress update by ID
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > delete > should return false when deleting non-existent update
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/progress-update.test.js:17:26\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/progress-update.test.js:17:26\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/progress-update.test.js',
      line: 17,
      column: 26
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ tests/unit/models/progress-update.test.js:17:26
     15|   beforeEach(async () => {
     16|     // Create test reader
     17|     const readerResult = await pool.query(
       |                          ^
     18|       'INSERT INTO reader_profiles (id) VALUES (gen_random_uuid()) RET…
     19|     );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/276]⎯

 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should create progress update with note and page marker
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should create progress update without page marker
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject empty note
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject note exceeding 1000 characters
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject page marker exceeding 50 characters
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > create > should reject invalid reading entry ID
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should return progress updates in DESC order (newest first)
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should return all progress update fields
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should return empty array when no updates exist
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findByEntry > should only return updates for the specified entry
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findById > should find progress update by ID
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > findById > should return null for non-existent ID
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > countByEntry > should return correct count of progress updates
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > countByEntry > should return 0 when no updates exist
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > delete > should delete progress update by ID
 FAIL  tests/unit/models/progress-update.test.js > ProgressUpdate Model > delete > should return false when deleting non-existent update
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/progress-update.test.js:42:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/progress-update.test.js:42:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/progress-update.test.js',
      line: 42,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ tests/unit/models/progress-update.test.js:42:5
     40| 
     41|   afterEach(async () => {
     42|     await pool.query('DELETE FROM progress_updates WHERE reading_entry…
       |     ^
     43|     await pool.query('DELETE FROM reading_entries WHERE id = $1', [tes…
     44|     await pool.query('DELETE FROM books WHERE id = $1', [testBookId]);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/276]⎯

 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should create a reading entry with valid data
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should enforce unique constraint on reader_id + book_id
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should reject invalid status value
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should reject rating without FINISHED status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should allow rating with FINISHED status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findById > should find reading entry by ID
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findById > should return null for non-existent ID
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should find all entries for a reader
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should include book details in results
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should support pagination
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReaderAndStatus > should filter entries by status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReaderAndStatus > should return empty array for status with no entries
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should update entry status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should allow updating to any valid status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should reject invalid status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > delete > should delete a reading entry
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > delete > should return false when deleting non-existent entry
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.createTestReader (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:18:3)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/reading-entry.test.js:15:20\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.createTestReader (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:18:3)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/reading-entry.test.js:15:20\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.createTestReader',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 18,
      column: 3
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/reading-entry.test.js',
      line: 15,
      column: 20
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.createTestReader tests/helpers/test-data.js:18:3
 ❯ tests/unit/models/reading-entry.test.js:15:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/276]⎯

 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should create a reading entry with valid data
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should enforce unique constraint on reader_id + book_id
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should reject invalid status value
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should reject rating without FINISHED status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > create > should allow rating with FINISHED status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findById > should find reading entry by ID
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findById > should return null for non-existent ID
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should find all entries for a reader
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should include book details in results
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReader > should support pagination
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReaderAndStatus > should filter entries by status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > findByReaderAndStatus > should return empty array for status with no entries
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should update entry status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should allow updating to any valid status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > updateStatus > should reject invalid status
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > delete > should delete a reading entry
 FAIL  tests/unit/models/reading-entry.test.js > ReadingEntry Model > delete > should return false when deleting non-existent entry
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/reading-entry.test.js:24:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/reading-entry.test.js:24:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.cleanupTestData',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 62,
      column: 5
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/reading-entry.test.js',
      line: 24,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.cleanupTestData tests/helpers/test-data.js:62:5
 ❯ tests/unit/models/reading-entry.test.js:24:5

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/276]⎯

 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > create > should create initial transition with null fromStatus
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > create > should create transition with both statuses
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > create > should reject invalid fromStatus
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > create > should reject invalid toStatus
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > create > should allow all valid status combinations
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return all transitions for an entry
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return transitions in reverse chronological order (newest first)
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return empty array for entry with no transitions
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return empty array for non-existent entry
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > getLatest > should return the most recent transition for an entry
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > getLatest > should return null for entry with no transitions
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.createTestReader (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:18:3)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/status-transition.test.js:21:20\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.createTestReader (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:18:3)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/status-transition.test.js:21:20\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.createTestReader',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 18,
      column: 3
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/status-transition.test.js',
      line: 21,
      column: 20
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.createTestReader tests/helpers/test-data.js:18:3
 ❯ tests/unit/models/status-transition.test.js:21:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/276]⎯

 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > create > should create initial transition with null fromStatus
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > create > should create transition with both statuses
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > create > should reject invalid fromStatus
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > create > should reject invalid toStatus
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > create > should allow all valid status combinations
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return all transitions for an entry
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return transitions in reverse chronological order (newest first)
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return empty array for entry with no transitions
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > findByEntry > should return empty array for non-existent entry
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > getLatest > should return the most recent transition for an entry
 FAIL  tests/unit/models/status-transition.test.js > StatusTransition Model > getLatest > should return null for entry with no transitions
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/status-transition.test.js:33:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/status-transition.test.js:33:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.cleanupTestData',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 62,
      column: 5
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/models/status-transition.test.js',
      line: 33,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.cleanupTestData tests/helpers/test-data.js:62:5
 ❯ tests/unit/models/status-transition.test.js:33:5

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[30/276]⎯

 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should add a new book and create reading entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should create initial status transition for new entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should detect duplicate books by title, author, and edition
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should allow same book for different readers
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should reuse existing book when adding for same reader with different edition
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should validate title length (max 500)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should validate author length (max 200)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should get all reading entries for a reader
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should filter by status
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should support pagination
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should join with book details
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should update status and record transition
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should log analytics event for status change (FR-016)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should validate status transitions
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should handle last-write-wins for concurrent edits (FR-010)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should update updatedAt timestamp
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should reject invalid status values
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should reject updates to non-existent entries
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should add progress note with content and page marker
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should add progress note without page marker
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject note exceeding 1000 characters
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject empty note content
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject progress marker exceeding 50 characters
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject note for non-existent reading entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should set recordedAt timestamp automatically
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should return progress notes in chronological DESC order (newest first)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should include book details with progress notes
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should return empty array when no notes exist
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should reject request for non-existent entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should set rating for finished book
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should set rating with reflection note
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should update existing rating
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating < 1
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating > 5
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject non-integer ratings
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating for non-FINISHED book
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject reflection note exceeding 2000 characters
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should accept reflection note at max length (2000 chars)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject request for non-existent entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject if reader does not own entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should log analytics event for rating set
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should clear rating and reflection note
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should succeed even if no rating exists
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should reject request for non-existent entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should reject if reader does not own entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should log analytics event for rating cleared
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should return only books with rating >= 4
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should order top rated books by rating DESC
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should return empty array if no top rated books
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should support pagination
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should include book details and reflection notes
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should handle second page correctly
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.createTestReader (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:18:3)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/services/reading-service.test.js:33:20\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.createTestReader (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:18:3)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/services/reading-service.test.js:33:20\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:694:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:774:30)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.createTestReader',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 18,
      column: 3
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/services/reading-service.test.js',
      line: 33,
      column: 20
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.createTestReader tests/helpers/test-data.js:18:3
 ❯ tests/unit/services/reading-service.test.js:33:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[31/276]⎯

 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should add a new book and create reading entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should create initial status transition for new entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should detect duplicate books by title, author, and edition
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should allow same book for different readers
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should reuse existing book when adding for same reader with different edition
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should validate title length (max 500)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addBook (T037 - duplicate detection, unique constraint) > should validate author length (max 200)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should get all reading entries for a reader
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should filter by status
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should support pagination
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getReadingEntries > should join with book details
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should update status and record transition
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should log analytics event for status change (FR-016)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should validate status transitions
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should handle last-write-wins for concurrent edits (FR-010)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should update updatedAt timestamp
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should reject invalid status values
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > updateStatus (T038 - from/to validation, history recording) > should reject updates to non-existent entries
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should add progress note with content and page marker
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should add progress note without page marker
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject note exceeding 1000 characters
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject empty note content
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject progress marker exceeding 50 characters
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should reject note for non-existent reading entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > addProgressNote (T071 - note length validation, timestamp handling) > should set recordedAt timestamp automatically
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should return progress notes in chronological DESC order (newest first)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should include book details with progress notes
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should return empty array when no notes exist
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getProgressNotes (T071 - chronological ordering) > should reject request for non-existent entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should set rating for finished book
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should set rating with reflection note
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should update existing rating
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating < 1
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating > 5
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject non-integer ratings
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject rating for non-FINISHED book
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject reflection note exceeding 2000 characters
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should accept reflection note at max length (2000 chars)
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject request for non-existent entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should reject if reader does not own entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > setRating (T094 - validate rating 1-5, only for FINISHED, reflection max 2000) > should log analytics event for rating set
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should clear rating and reflection note
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should succeed even if no rating exists
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should reject request for non-existent entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should reject if reader does not own entry
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > clearRating (T094 - allow rating removal) > should log analytics event for rating cleared
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should return only books with rating >= 4
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should order top rated books by rating DESC
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should return empty array if no top rated books
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should support pagination
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should include book details and reflection notes
 FAIL  tests/unit/services/reading-service.test.js > ReadingService > getTopRatedBooks (T095 - filter rating ≥4, ordering) > should handle second page correctly
{
  stack: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/services/reading-service.test.js:38:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  errors: [
    {
      stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM ::1:5432 - Local (:::0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '::1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    },
    {
      stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n' +
        '    at internalConnectMultiple (node:net:1206:16)\n' +
        '    at internalConnectMultiple (node:net:1210:5)\n' +
        '    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n' +
        '    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n' +
        '    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)',
      message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)',
      errno: -1,
      code: 'EPERM',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 5432,
      constructor: 'Function<Error>',
      name: 'Error',
      toString: 'Function<toString>'
    }
  ],
  code: 'EPERM',
  stackStr: 'AggregateError: \n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js:45:11\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at Module.query (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js:36:20)\n' +
    '    at Module.cleanupTestData (/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js:62:5)\n' +
    '    at /Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/services/reading-service.test.js:38:5\n' +
    '    at async Promise.all (index 0)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:700:23)\n' +
    '    at callSuiteHook (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:708:10)\n' +
    '    at runTest (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:807:9)\n' +
    '    at runSuite (file:///Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/@vitest/runner/dist/index.js:909:15)',
  nameStr: 'AggregateError',
  expected: 'undefined',
  actual: 'undefined',
  message: '',
  constructor: 'Function<AggregateError>',
  name: 'AggregateError',
  toString: 'Function<toString>',
  stacks: [
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/node_modules/pg-pool/index.js',
      line: 45,
      column: 11
    },
    {
      method: 'Module.query',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/src/db/connection.js',
      line: 36,
      column: 20
    },
    {
      method: 'Module.cleanupTestData',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/helpers/test-data.js',
      line: 62,
      column: 5
    },
    {
      method: '',
      file: '/Users/zachmartin/projects/active/bookbuddy-mk2/backend/tests/unit/services/reading-service.test.js',
      line: 38,
      column: 5
    }
  ]
}
 ❯ node_modules/pg-pool/index.js:45:11
 ❯ Module.query src/db/connection.js:36:20
     34|   const start = Date.now();
     35|   try {
     36|     const result = await pool.query(text, params);
       |                    ^
     37|     const duration = Date.now() - start;
     38| 
 ❯ Module.cleanupTestData tests/helpers/test-data.js:62:5
 ❯ tests/unit/services/reading-service.test.js:38:5

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errors: [ { stack: 'Error: connect EPERM ::1:5432 - Local (:::0)\n    at internalConnectMultiple (node:net:1206:16)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM ::1:5432 - Local (:::0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '::1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' }, { stack: 'Error: connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)\n    at internalConnectMultiple (node:net:1206:16)\n    at internalConnectMultiple (node:net:1210:5)\n    at defaultTriggerAsyncIdScope (node:internal/async_hooks:472:18)\n    at GetAddrInfoReqWrap.emitLookup [as callback] (node:net:1552:7)\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:134:8)', message: 'connect EPERM 127.0.0.1:5432 - Local (0.0.0.0:0)', errno: -1, code: 'EPERM', syscall: 'connect', address: '127.0.0.1', port: 5432, constructor: 'Function<Error>', name: 'Error', toString: 'Function<toString>' } ], code: 'EPERM' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[32/276]⎯

⎯⎯⎯⎯⎯⎯ Unhandled Errors ⎯⎯⎯⎯⎯⎯

Vitest caught 2 unhandled errors during the test run.
This might cause false positive tests. Resolve unhandled errors to make sure your tests are not affected.

⎯⎯⎯⎯ Unhandled Rejection ⎯⎯⎯⎯⎯
Error: process.exit unexpectedly called with "1"
 ❯ process.exit node_modules/vitest/dist/vendor/execute.fL3szUAI.js:401:11
 ❯ start src/server.js:90:13
     88|   } catch (err) {
     89|     logger.error(err, 'Failed to start server');
     90|     process.exit(1);
       |             ^
     91|   }
     92| }
 ❯ processTicksAndRejections node:internal/process/task_queues:105:5

This error originated in "tests/integration/us3-rate-reflect.test.js" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should allow reader to finish book, rate it, and see it in Top Rated filter". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.

⎯⎯⎯⎯ Unhandled Rejection ⎯⎯⎯⎯⎯
Error: process.exit unexpectedly called with "1"
 ❯ process.exit node_modules/vitest/dist/vendor/execute.fL3szUAI.js:401:11
 ❯ start src/server.js:90:13
     88|   } catch (err) {
     89|     logger.error(err, 'Failed to start server');
     90|     process.exit(1);
       |             ^
     91|   }
     92| }
 ❯ processTicksAndRejections node:internal/process/task_queues:105:5

This error originated in "tests/contract/ratings.test.js" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.
The latest test that might've caused the error is "should set rating and reflection for finished book". It might mean one of the following:
- The error was thrown, while Vitest was running this test.
- If the error occurred after the test had been completed, this was the last documented test before it was thrown.
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

 Test Files  11 failed (11)
      Tests  148 failed (175)
     Errors  2 errors
   Start at  20:05:40
   Duration  509ms (transform 61ms, setup 0ms, collect 189ms, tests 197ms, environment 0ms, prepare 24ms)


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
