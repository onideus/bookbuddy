name: Overseer Integration CI

# Runs integration tests and E2E tests on overseer branch
on:
  push:
    branches:
      - 'feature/*/overseer'
  pull_request:
    branches:
      - main

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bookbuddy_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bookbuddy_test
          REDIS_URL: redis://localhost:6379
        run: npm run migrate || echo "No migration script"

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bookbuddy_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: npm run test:integration || npm test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 14

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps || echo "No Playwright configured"

      - name: Start Docker services
        run: docker compose up -d || echo "No docker-compose.yml"

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health 2>/dev/null; do sleep 2; done' || echo "No health endpoint"

      - name: Run E2E tests
        run: npm run test:e2e || echo "No E2E tests configured"

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 14

      - name: Stop Docker services
        if: always()
        run: docker compose down || true

  build-and-deploy-preview:
    name: Build & Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy preview (placeholder)
        run: |
          echo "Preview deployment would happen here"
          echo "Branch: ${GITHUB_REF#refs/heads/}"
          # Add actual deployment commands (Vercel, Netlify, etc.)

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check || echo "No format check configured"

      - name: Run type checking
        run: npm run type-check || echo "No type checking configured"

      - name: Security audit
        run: npm audit --audit-level=moderate || true

  status-summary:
    name: Update Status Summary
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, build-and-deploy-preview, code-quality]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update overseer state
        run: |
          SPEC_ID="${GITHUB_REF#refs/heads/feature/}"
          SPEC_ID="${SPEC_ID%/overseer}"

          echo "Updating state for spec: $SPEC_ID"

          # Update state/overseer.md with test results
          if [ -f "state/overseer.md" ]; then
            cat >> state/overseer.md << EOF

## Integration Test Results (Latest)
**Run at**: $(date)
**Commit**: $GITHUB_SHA
**Status**: ${{ job.status }}

- Integration Tests: ${{ needs.integration-tests.result }}
- E2E Tests: ${{ needs.e2e-tests.result }}
- Build: ${{ needs.build-and-deploy-preview.result }}
- Code Quality: ${{ needs.code-quality.result }}

EOF
          fi

      - name: Commit status update
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add state/overseer.md || true
          git commit -m "Update integration test status" || echo "No changes to commit"
          git push || echo "No changes to push"
